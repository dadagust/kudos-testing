# Generated by Django 5.2.7 on 2025-10-26 17:47

import applications.core.models
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(auto_now=True, verbose_name="Дата изменения"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Название")),
                (
                    "slug",
                    models.SlugField(max_length=255, unique=True, verbose_name="Слаг"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="products.category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория",
                "verbose_name_plural": "Категории",
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(auto_now=True, verbose_name="Дата изменения"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Название")),
                (
                    "features",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Особенности"
                    ),
                ),
                (
                    "price_rub",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                        verbose_name="Стоимость, руб",
                    ),
                ),
                (
                    "loss_compensation_rub",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                        verbose_name="Компенсация за потерю, руб",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("white", "Белый"),
                            ("gray", "Серый"),
                            ("black", "Чёрный"),
                            ("red", "Красный"),
                            ("orange", "Оранжевый"),
                            ("brown", "Коричневый"),
                            ("yellow", "Жёлтый"),
                            ("green", "Зелёный"),
                            ("turquoise", "Бирюзовый"),
                            ("blue", "Синий"),
                            ("violet", "Фиолетовый"),
                        ],
                        max_length=32,
                        verbose_name="Цвет",
                    ),
                ),
                (
                    "dimensions_shape",
                    models.CharField(
                        choices=[
                            ("circle__diameter", "Круг — диаметр"),
                            ("line__length", "Линия — длина"),
                            (
                                "rectangle__length_width",
                                "Прямоугольник — длина и ширина",
                            ),
                            ("cylinder__diameter_height", "Цилиндр — диаметр и высота"),
                            (
                                "box__height_width_depth",
                                "Параллелепипед — высота, ширина и глубина",
                            ),
                        ],
                        max_length=64,
                        verbose_name="Форма",
                    ),
                ),
                (
                    "circle_diameter_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Диаметр круга, см",
                    ),
                ),
                (
                    "line_length_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Длина линии, см",
                    ),
                ),
                (
                    "rectangle_length_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Длина прямоугольника, см",
                    ),
                ),
                (
                    "rectangle_width_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Ширина прямоугольника, см",
                    ),
                ),
                (
                    "cylinder_diameter_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Диаметр цилиндра, см",
                    ),
                ),
                (
                    "cylinder_height_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Высота цилиндра, см",
                    ),
                ),
                (
                    "box_height_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Высота параллелепипеда, см",
                    ),
                ),
                (
                    "box_width_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Ширина параллелепипеда, см",
                    ),
                ),
                (
                    "box_depth_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Глубина параллелепипеда, см",
                    ),
                ),
                (
                    "occupancy_cleaning_days",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Чистка, дни"
                    ),
                ),
                (
                    "occupancy_insurance_reserve_percent",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Страховой резерв, %",
                    ),
                ),
                (
                    "delivery_volume_cm3",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Объём, см3"
                    ),
                ),
                (
                    "delivery_weight_kg",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Вес, кг",
                    ),
                ),
                (
                    "delivery_transport_restriction",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("any", "Любой"),
                            ("truck_only", "Только грузовой"),
                            ("heavy_only", "Только большегрузный"),
                            ("heavy16_only", "Только «Большегрузный 16+»"),
                            ("special2_only", "Только «Особый 2»"),
                        ],
                        max_length=32,
                        verbose_name="Ограничение по транспорту",
                    ),
                ),
                (
                    "delivery_self_pickup_allowed",
                    models.BooleanField(
                        default=False, verbose_name="Самовывоз разрешён"
                    ),
                ),
                (
                    "setup_install_minutes",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Монтаж, мин"
                    ),
                ),
                (
                    "setup_uninstall_minutes",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Демонтаж, мин"
                    ),
                ),
                (
                    "setup_installer_qualification",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("any", "Любой"),
                            (
                                "worker_with_steam_generator",
                                "Только «Работник с парогенератором»",
                            ),
                        ],
                        max_length=64,
                        verbose_name="Квалификация сетапёров",
                    ),
                ),
                (
                    "setup_min_installers",
                    models.PositiveIntegerField(
                        blank=True,
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4")],
                        null=True,
                        verbose_name="Минимум сетапёров",
                    ),
                ),
                (
                    "setup_self_setup_allowed",
                    models.BooleanField(
                        default=False, verbose_name="Самостоятельный сетап"
                    ),
                ),
                (
                    "rental_base_period",
                    models.CharField(
                        blank=True,
                        choices=[("standard", "Стандартный")],
                        max_length=32,
                        verbose_name="Базовый период аренды",
                    ),
                ),
                (
                    "visibility_reservation_mode",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("operator_only", "Только через оператора"),
                            ("online_allowed", "Разрешено онлайн"),
                            ("disabled", "Запрещено"),
                        ],
                        max_length=32,
                        verbose_name="Бронирование",
                    ),
                ),
                (
                    "visibility_show_on_pifakit",
                    models.BooleanField(default=False, verbose_name="На pifakit"),
                ),
                (
                    "visibility_show_on_site",
                    models.BooleanField(default=False, verbose_name="На сайте"),
                ),
                (
                    "visibility_show_in_new",
                    models.BooleanField(default=False, verbose_name="Новинки"),
                ),
                (
                    "visibility_category_cover_on_home",
                    models.BooleanField(
                        default=False, verbose_name="Обложка категории"
                    ),
                ),
                (
                    "seo_slug",
                    models.SlugField(
                        blank=True,
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "seo_meta_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Meta title"
                    ),
                ),
                (
                    "seo_meta_description",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Meta description"
                    ),
                ),
                (
                    "seo_meta_keywords",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Meta keywords"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="products",
                        to="products.category",
                        verbose_name="Категория",
                    ),
                ),
            ],
            options={
                "verbose_name": "Товар",
                "verbose_name_plural": "Товары",
                "ordering": ["-created"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(auto_now=True, verbose_name="Дата изменения"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "file",
                    models.ImageField(
                        upload_to=applications.core.models.PathAndRename("products"),
                        verbose_name="Файл",
                    ),
                ),
                (
                    "position",
                    models.PositiveIntegerField(default=1, verbose_name="Позиция"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="products.product",
                        verbose_name="Товар",
                    ),
                ),
            ],
            options={
                "verbose_name": "Изображение товара",
                "verbose_name_plural": "Изображения товара",
                "ordering": ["position", "created"],
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["name"], name="product_name_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["category"], name="product_category_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["color"], name="product_color_idx"),
        ),
    ]
