# Generated by Django 5.2.7 on 2025-10-30 16:59

import uuid
from decimal import Decimal

import django.core.files.storage
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import applications.core.models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Color',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ('value', models.CharField(max_length=32, unique=True, verbose_name='Значение')),
                ('label', models.CharField(max_length=255, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Цвет',
                'verbose_name_plural': 'Цвета',
                'ordering': ['label'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstallerQualification',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                (
                    'price_rub',
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal('0.00'),
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal('0'))],
                        verbose_name='Стоимость, руб',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Квалификация монтажников',
                'verbose_name_plural': 'Квалификации монтажников',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransportRestriction',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ('value', models.CharField(max_length=32, unique=True, verbose_name='Значение')),
                ('label', models.CharField(max_length=255, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Ограничение по транспорту',
                'verbose_name_plural': 'Ограничения по транспорту',
                'ordering': ['label'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Слаг')),
                (
                    'parent',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='children',
                        to='products.category',
                        verbose_name='Родительская категория',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                (
                    'features',
                    models.JSONField(blank=True, default=list, verbose_name='Особенности'),
                ),
                (
                    'price_rub',
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal('0'))],
                        verbose_name='Стоимость, руб',
                    ),
                ),
                (
                    'loss_compensation_rub',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal('0'))],
                        verbose_name='Компенсация за потерю, руб',
                    ),
                ),
                (
                    'dimensions_shape',
                    models.CharField(
                        choices=[
                            ('circle__diameter', 'Круг — диаметр'),
                            ('line__length', 'Линия — длина'),
                            ('rectangle__length_width', 'Прямоугольник — длина и ширина'),
                            ('cylinder__diameter_height', 'Цилиндр — диаметр и высота'),
                            (
                                'box__height_width_depth',
                                'Параллелепипед — высота, ширина и глубина',
                            ),
                        ],
                        max_length=64,
                        verbose_name='Форма',
                    ),
                ),
                (
                    'circle_diameter_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Диаметр круга, см',
                    ),
                ),
                (
                    'line_length_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Длина линии, см',
                    ),
                ),
                (
                    'rectangle_length_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Длина прямоугольника, см',
                    ),
                ),
                (
                    'rectangle_width_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Ширина прямоугольника, см',
                    ),
                ),
                (
                    'cylinder_diameter_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Диаметр цилиндра, см',
                    ),
                ),
                (
                    'cylinder_height_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Высота цилиндра, см',
                    ),
                ),
                (
                    'box_height_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Высота параллелепипеда, см',
                    ),
                ),
                (
                    'box_width_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Ширина параллелепипеда, см',
                    ),
                ),
                (
                    'box_depth_cm',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Глубина параллелепипеда, см',
                    ),
                ),
                (
                    'occupancy_cleaning_days',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='Чистка, дни'),
                ),
                (
                    'delivery_volume_cm3',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='Объём, см3'),
                ),
                (
                    'delivery_weight_kg',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name='Вес, кг',
                    ),
                ),
                (
                    'delivery_self_pickup_allowed',
                    models.BooleanField(default=False, verbose_name='Самовывоз разрешён'),
                ),
                (
                    'setup_install_minutes',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='Монтаж, мин'),
                ),
                (
                    'setup_uninstall_minutes',
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name='Демонтаж, мин'
                    ),
                ),
                (
                    'setup_min_installers',
                    models.PositiveIntegerField(
                        blank=True,
                        choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4')],
                        null=True,
                        verbose_name='Минимум сетапёров',
                    ),
                ),
                (
                    'setup_self_setup_allowed',
                    models.BooleanField(default=False, verbose_name='Самостоятельный сетап'),
                ),
                (
                    'rental_mode',
                    models.CharField(
                        choices=[('standard', 'Стандартный'), ('special', 'Особый')],
                        default='standard',
                        max_length=32,
                        verbose_name='Режим аренды',
                    ),
                ),
                (
                    'rental_special_tiers',
                    models.JSONField(
                        blank=True, default=list, verbose_name='Тарифы аренды (особый)'
                    ),
                ),
                (
                    'visibility_reservation_mode',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('operator_only', 'Только через оператора'),
                            ('online_allowed', 'Разрешено онлайн'),
                            ('disabled', 'Запрещено'),
                        ],
                        max_length=32,
                        verbose_name='Бронирование',
                    ),
                ),
                (
                    'visibility_show_on_pifakit',
                    models.BooleanField(default=False, verbose_name='На pifakit'),
                ),
                (
                    'visibility_show_on_site',
                    models.BooleanField(default=False, verbose_name='На сайте'),
                ),
                (
                    'visibility_show_in_new',
                    models.BooleanField(default=False, verbose_name='Новинки'),
                ),
                (
                    'visibility_category_cover_on_home',
                    models.BooleanField(default=False, verbose_name='Обложка категории'),
                ),
                (
                    'seo_url_name',
                    models.SlugField(max_length=255, unique=True, verbose_name='URL имя'),
                ),
                (
                    'seo_meta_title',
                    models.CharField(blank=True, max_length=255, verbose_name='Meta title'),
                ),
                (
                    'seo_meta_description',
                    models.CharField(blank=True, max_length=500, verbose_name='Meta description'),
                ),
                (
                    'category',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='products',
                        to='products.category',
                        verbose_name='Категория',
                    ),
                ),
                (
                    'color',
                    models.ForeignKey(
                        blank=True,
                        db_column='color',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='products',
                        to='products.color',
                        to_field='value',
                        verbose_name='Цвет',
                    ),
                ),
                (
                    'complementary_products',
                    models.ManyToManyField(
                        blank=True,
                        related_name='complemented_by',
                        to='products.product',
                        verbose_name='Дополняющие изделия',
                    ),
                ),
                (
                    'setup_installer_qualification',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='products',
                        to='products.installerqualification',
                        verbose_name='Квалификация сетапёров',
                    ),
                ),
                (
                    'delivery_transport_restriction',
                    models.ForeignKey(
                        blank=True,
                        db_column='delivery_transport_restriction',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='products',
                        to='products.transportrestriction',
                        to_field='value',
                        verbose_name='Ограничение по транспорту',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    'file',
                    models.ImageField(
                        storage=django.core.files.storage.FileSystemStorage(
                            base_url='/media/products/', location='media/products'
                        ),
                        upload_to=applications.core.models.PathAndRename(''),
                        verbose_name='Файл',
                    ),
                ),
                ('position', models.PositiveIntegerField(default=1, verbose_name='Позиция')),
                (
                    'product',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='images',
                        to='products.product',
                        verbose_name='Товар',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Изображение товара',
                'verbose_name_plural': 'Изображения товара',
                'ordering': ['position', 'created'],
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name'], name='product_name_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='product_category_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['color'], name='product_color_idx'),
        ),
    ]
