openapi: 3.0.3
info:
  title: Kudos Admin Aggregator API (Draft)
  version: 0.1.0
  description: |
    Черновик спецификации API для админ‑панели агрегатора kudos.ru.
    Документ охватывает основные сущности каталога, заказов, клиентов, склада и документов.
servers:
  - url: https://api.kudos.local/v1
    description: Локальная среда разработки
  - url: https://api.staging.kudos.ru/v1
    description: Staging
  - url: https://api.kudos.ru/v1
    description: Продакшн
components:
  parameters:
    PageParam:
      name: page
      in: query
      description: Номер страницы пагинации, начиная с 1.
      schema:
        type: integer
        minimum: 1
        default: 1
    PageSizeParam:
      name: page_size
      in: query
      description: Количество элементов на странице (1-100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SortParam:
      name: sort
      in: query
      description: |
        Поле сортировки. Префикс `-` сортирует по убыванию, без префикса — по возрастанию.
        Допускается перечисление нескольких полей через запятую.
      schema:
        type: string
    SearchParam:
      name: search
      in: query
      description: Полнотекстовый поиск по ключевым полям ресурса.
      schema:
        type: string
    FilterStatus:
      name: filter[status]
      in: query
      description: Фильтр по статусу ресурса.
      schema:
        type: string
    FilterCategory:
      name: filter[category_id]
      in: query
      description: Фильтр продуктов по категории.
      schema:
        type: string
        format: uuid
    FilterCustomerRole:
      name: filter[role]
      in: query
      description: Фильтр клиентов по роли.
      schema:
        type: string
    FilterOrderCustomer:
      name: filter[customer_id]
      in: query
      description: Фильтр заказов по клиенту.
      schema:
        type: string
        format: uuid
    FilterOrderStatus:
      name: filter[status]
      in: query
      description: Фильтр заказов по статусу.
      schema:
        type: string
    FilterInventoryProduct:
      name: filter[product_id]
      in: query
      description: Фильтр складских позиций по продукту.
      schema:
        type: string
        format: uuid
    FilterDocumentType:
      name: filter[type]
      in: query
      description: Фильтр документов по типу.
      schema:
        type: string
  responses:
    NotFound:
      description: Ресурс не найден.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ValidationError:
      description: Ошибка валидации запроса.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        page_size:
          type: integer
          minimum: 1
          maximum: 100
        total_items:
          type: integer
          minimum: 0
        total_pages:
          type: integer
          minimum: 0
        has_next:
          type: boolean
        has_prev:
          type: boolean
      required:
        - page
        - page_size
        - total_items
        - total_pages
        - has_next
        - has_prev
    PaginationLinks:
      type: object
      properties:
        self:
          type: string
          format: uri
        next:
          type: string
          format: uri
          nullable: true
        prev:
          type: string
          format: uri
          nullable: true
        first:
          type: string
          format: uri
        last:
          type: string
          format: uri
      required:
        - self
        - next
        - prev
        - first
        - last
    Error:
      type: object
      properties:
        code:
          type: string
        title:
          type: string
        detail:
          type: string
        source:
          type: object
          properties:
            pointer:
              type: string
              description: JSON Pointer до поля ошибки.
            parameter:
              type: string
              description: Параметр запроса, вызвавший ошибку.
      required:
        - code
        - title
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        trace_id:
          type: string
          description: Идентификатор запроса для трассировки.
      required:
        - errors
    CategorySummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
      required:
        - id
        - name
        - slug
    MediaAsset:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [image, video, document]
        url:
          type: string
          format: uri
        alt_text:
          type: string
        is_primary:
          type: boolean
        sort_order:
          type: integer
      required:
        - id
        - type
        - url
        - is_primary
    AttributeValue:
      type: object
      properties:
        attribute_id:
          type: string
          format: uuid
        code:
          type: string
        name:
          type: string
        value:
          type: string
        unit:
          type: string
          nullable: true
      required:
        - attribute_id
        - code
        - name
        - value
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category:
          $ref: '#/components/schemas/CategorySummary'
        sku:
          type: string
        name:
          type: string
        slug:
          type: string
        status:
          type: string
          enum: [draft, active, archived]
        availability_status:
          type: string
          enum: [in_stock, low_stock, out_of_stock, archived]
        rental_unit:
          type: string
          enum: [day, shift, week]
        base_price:
          type: number
          format: decimal
        security_deposit:
          type: number
          format: decimal
          nullable: true
        short_description:
          type: string
        full_description:
          type: string
        media:
          type: array
          items:
            $ref: '#/components/schemas/MediaAsset'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeValue'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - category
        - sku
        - name
        - slug
        - status
        - availability_status
        - rental_unit
        - base_price
        - short_description
        - created_at
        - updated_at
    ProductInput:
      type: object
      properties:
        category_id:
          type: string
          format: uuid
        sku:
          type: string
        name:
          type: string
        slug:
          type: string
        status:
          type: string
          enum: [draft, active, archived]
        availability_status:
          type: string
          enum: [in_stock, low_stock, out_of_stock, archived]
        rental_unit:
          type: string
          enum: [day, shift, week]
        base_price:
          type: number
          format: decimal
        security_deposit:
          type: number
          format: decimal
          nullable: true
        short_description:
          type: string
        full_description:
          type: string
        attribute_values:
          type: array
          items:
            type: object
            properties:
              attribute_id:
                type: string
                format: uuid
              value:
                type: string
            required:
              - attribute_id
              - value
        media_ids:
          type: array
          items:
            type: string
            format: uuid
        bundle_ids:
          type: array
          items:
            type: string
            format: uuid
      required:
        - category_id
        - sku
        - name
        - status
        - availability_status
        - rental_unit
        - base_price
        - short_description
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        customer:
          $ref: '#/components/schemas/CustomerSummary'
        company:
          $ref: '#/components/schemas/CompanySummary'
          nullable: true
        status:
          type: string
          enum:
            [
              new,
              in_progress,
              reserved,
              cancelled,
              partially_paid,
              paid,
              to_fulfillment,
              assembled,
              shipped,
              completed,
              dispute,
              surcharge,
              closed,
            ]
        payment_status:
          type: string
          enum: [awaiting, partial, paid, refunded]
        channel:
          type: string
          enum: [online, offline, manager]
        rental_start_date:
          type: string
          format: date
        rental_end_date:
          type: string
          format: date
        totals:
          $ref: '#/components/schemas/OrderTotals'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        deposit:
          $ref: '#/components/schemas/Deposit'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - code
        - customer
        - status
        - payment_status
        - channel
        - rental_start_date
        - rental_end_date
        - totals
        - items
        - payments
        - created_at
        - updated_at
    OrderTotals:
      type: object
      properties:
        rental_total:
          type: number
          format: decimal
        delivery_total:
          type: number
          format: decimal
        deposit_total:
          type: number
          format: decimal
        discount_total:
          type: number
          format: decimal
        grand_total:
          type: number
          format: decimal
      required:
        - rental_total
        - delivery_total
        - deposit_total
        - discount_total
        - grand_total
    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
          nullable: true
        bundle_id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        quantity:
          type: integer
        rental_days:
          type: integer
        unit_price:
          type: number
          format: decimal
        deposit_amount:
          type: number
          format: decimal
        discount_amount:
          type: number
          format: decimal
        status:
          type: string
          enum: [pending, confirmed, fulfilled, returned, cancelled]
      required:
        - id
        - name
        - quantity
        - rental_days
        - unit_price
        - deposit_amount
        - discount_amount
        - status
    OrderInput:
      type: object
      properties:
        customer_id:
          type: string
          format: uuid
        company_id:
          type: string
          format: uuid
          nullable: true
        rental_start_date:
          type: string
          format: date
        rental_end_date:
          type: string
          format: date
        items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
                format: uuid
              bundle_id:
                type: string
                format: uuid
                nullable: true
              quantity:
                type: integer
              rental_days:
                type: integer
              unit_price:
                type: number
                format: decimal
              deposit_amount:
                type: number
                format: decimal
              discount_amount:
                type: number
                format: decimal
            required:
              - product_id
              - quantity
              - rental_days
              - unit_price
      required:
        - customer_id
        - rental_start_date
        - rental_end_date
        - items
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        purpose:
          type: string
          enum: [rental, deposit, sale, surcharge]
        provider:
          type: string
        method:
          type: string
          enum: [card, sbp, invoice, cash]
        amount:
          type: number
          format: decimal
        currency:
          type: string
          default: RUB
        status:
          type: string
          enum: [draft, pending, processing, succeeded, failed, refunded]
        due_at:
          type: string
          format: date-time
          nullable: true
        paid_at:
          type: string
          format: date-time
          nullable: true
        external_reference:
          type: string
          nullable: true
      required:
        - id
        - purpose
        - provider
        - method
        - amount
        - currency
        - status
    PaymentInput:
      type: object
      properties:
        purpose:
          type: string
          enum: [rental, deposit, sale, surcharge]
        provider:
          type: string
        method:
          type: string
          enum: [card, sbp, invoice, cash]
        amount:
          type: number
          format: decimal
        currency:
          type: string
          default: RUB
        due_at:
          type: string
          format: date-time
          nullable: true
      required:
        - purpose
        - provider
        - method
        - amount
    Deposit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        expected_amount:
          type: number
          format: decimal
        captured_amount:
          type: number
          format: decimal
          nullable: true
        status:
          type: string
          enum: [pending, captured, partially_returned, returned, dispute]
        captured_at:
          type: string
          format: date-time
          nullable: true
        released_at:
          type: string
          format: date-time
          nullable: true
        notes:
          type: string
          nullable: true
      required:
        - id
        - expected_amount
        - status
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customer_type:
          type: string
          enum: [personal, business]
        display_name:
          type: string
        full_name:
          type: string
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        middle_name:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        gdpr_consent:
          type: boolean
        notes:
          type: string
          nullable: true
        company:
          $ref: '#/components/schemas/Company'
          nullable: true
        owner_id:
          type: integer
          nullable: true
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - customer_type
        - display_name
        - created_at
        - updated_at
    CustomerSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customer_type:
          type: string
          enum: [personal, business]
        display_name:
          type: string
        full_name:
          type: string
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        gdpr_consent:
          type: boolean
        company:
          $ref: '#/components/schemas/CompanySummary'
          nullable: true
        owner_id:
          type: integer
          nullable: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - customer_type
        - display_name
        - created_at
        - updated_at
    CustomerInput:
      type: object
      properties:
        customer_type:
          type: string
          enum: [personal, business]
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        middle_name:
          type: string
          nullable: true
        display_name:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        gdpr_consent:
          type: boolean
        notes:
          type: string
          nullable: true
        owner_id:
          type: integer
          nullable: true
        company:
          $ref: '#/components/schemas/CompanyInput'
          nullable: true
      required:
        - customer_type
    CompanySummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        legal_name:
          type: string
          nullable: true
        inn:
          type: string
          nullable: true
      required:
        - id
        - name
    Company:
      allOf:
        - $ref: '#/components/schemas/CompanySummary'
        - type: object
          properties:
            kpp:
              type: string
              nullable: true
            ogrn:
              type: string
              nullable: true
            email:
              type: string
              format: email
              nullable: true
            phone:
              type: string
              nullable: true
            website:
              type: string
              format: uri
              nullable: true
            notes:
              type: string
              nullable: true
    CompanyInput:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        legal_name:
          type: string
          nullable: true
        inn:
          type: string
          nullable: true
        kpp:
          type: string
          nullable: true
        ogrn:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        website:
          type: string
          format: uri
          nullable: true
        notes:
          type: string
          nullable: true
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        address_type:
          type: string
          enum: [billing, shipping, other]
        title:
          type: string
          nullable: true
        line1:
          type: string
        line2:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
        postal_code:
          type: string
          nullable: true
        country:
          type: string
        is_primary:
          type: boolean
        latitude:
          type: number
          format: float
          nullable: true
        longitude:
          type: number
          format: float
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - address_type
        - line1
        - country
        - is_primary
        - created_at
        - updated_at
    Contact:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        position:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        is_primary:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - first_name
        - is_primary
        - created_at
        - updated_at
    ContactInput:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        position:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        is_primary:
          type: boolean
      required:
        - first_name
    InventoryItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        warehouse_id:
          type: string
        condition:
          type: string
          enum: [new, good, worn, damaged]
        serial_number:
          type: string
          nullable: true
        quantity_total:
          type: integer
        quantity_available:
          type: integer
        quantity_reserved:
          type: integer
        status:
          type: string
          enum: [available, reserved, maintenance, retired]
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
      required:
        - id
        - product_id
        - warehouse_id
        - condition
        - quantity_total
        - quantity_available
        - quantity_reserved
        - status
    InventoryItemInput:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
        warehouse_id:
          type: string
        condition:
          type: string
          enum: [new, good, worn, damaged]
        serial_number:
          type: string
          nullable: true
        quantity_total:
          type: integer
        status:
          type: string
          enum: [available, reserved, maintenance, retired]
      required:
        - product_id
        - warehouse_id
        - condition
        - quantity_total
        - status
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        reserved_from:
          type: string
          format: date
        reserved_to:
          type: string
          format: date
        quantity:
          type: integer
        status:
          type: string
          enum: [pending, confirmed, released, cancelled]
      required:
        - id
        - order_id
        - reserved_from
        - reserved_to
        - quantity
        - status
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        type:
          type: string
          enum: [proposal, contract, invoice, act, checklist, route_sheet]
        status:
          type: string
          enum: [draft, issued, sent, signed, archived]
        file_url:
          type: string
          format: uri
        version:
          type: integer
        issued_at:
          type: string
          format: date-time
          nullable: true
        valid_until:
          type: string
          format: date-time
          nullable: true
      required:
        - id
        - order_id
        - type
        - status
        - file_url
        - version
    DocumentInput:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
        type:
          type: string
          enum: [proposal, contract, invoice, act, checklist, route_sheet]
        file_url:
          type: string
          format: uri
        valid_until:
          type: string
          format: date-time
          nullable: true
      required:
        - order_id
        - type
        - file_url
    ProductCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'
      required:
        - data
        - meta
        - links
    ProductResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Product'
      required:
        - data
    OrderCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'
      required:
        - data
        - meta
        - links
    OrderResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Order'
      required:
        - data
    CustomerCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'
      required:
        - data
        - meta
        - links
    CustomerResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Customer'
      required:
        - data
    ContactCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'
      required:
        - data
        - meta
        - links
    ContactResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Contact'
      required:
        - data
    InventoryCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryItem'
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'
      required:
        - data
        - meta
        - links
    InventoryResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/InventoryItem'
      required:
        - data
    DocumentCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'
      required:
        - data
        - meta
        - links
    DocumentResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Document'
      required:
        - data
paths:
  /core/products:
    get:
      summary: Список продуктов
      description: Возвращает страницу продуктов каталога с поддержкой поиска, фильтрации и сортировки.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterStatus'
        - $ref: '#/components/parameters/FilterCategory'
      responses:
        '200':
          description: Список продуктов.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
    post:
      summary: Создание продукта
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Продукт создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /core/products/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Карточка продукта
      responses:
        '200':
          description: Детальная информация о продукте.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Обновление продукта
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Обновлённый продукт.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Удаление продукта
      responses:
        '204':
          description: Продукт удалён.
        '404':
          $ref: '#/components/responses/NotFound'
  /core/orders:
    get:
      summary: Список заказов
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterOrderStatus'
        - $ref: '#/components/parameters/FilterOrderCustomer'
      responses:
        '200':
          description: Список заказов.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCollection'
    post:
      summary: Создание заказа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Заказ создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /core/orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Карточка заказа
      responses:
        '200':
          description: Детальная информация о заказе.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Обновление заказа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '200':
          description: Обновлённый заказ.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Удаление заказа
      responses:
        '204':
          description: Заказ удалён.
        '404':
          $ref: '#/components/responses/NotFound'
  /core/orders/{orderId}/payments:
    post:
      summary: Создание платежа по заказу
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInput'
      responses:
        '201':
          description: Платёж создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/v1/customer/:
    get:
      summary: Список клиентов
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/SortParam'
        - name: filter[email]
          in: query
          description: Фильтр по email клиента.
          schema:
            type: string
            format: email
        - name: filter[phone]
          in: query
          description: Фильтр по телефону клиента.
          schema:
            type: string
        - name: filter[company_id]
          in: query
          description: Фильтр по идентификатору компании.
          schema:
            type: string
            format: uuid
        - name: filter[created_at][from]
          in: query
          description: Начало диапазона по дате создания.
          schema:
            type: string
            format: date-time
        - name: filter[created_at][to]
          in: query
          description: Конец диапазона по дате создания.
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Список клиентов.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCollection'
    post:
      summary: Создание клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '201':
          description: Клиент создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v1/customer/{customerId}/:
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Карточка клиента
      responses:
        '200':
          description: Детальная информация о клиенте.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Обновление клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '200':
          description: Обновлённый клиент.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Удаление клиента
      responses:
        '204':
          description: Клиент помечен как неактивный.
        '404':
          $ref: '#/components/responses/NotFound'
  /api/v1/customer/{customerId}/contact/:
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Контакты клиента
      responses:
        '200':
          description: Список контактов клиента.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactCollection'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Добавление контакта клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
      responses:
        '201':
          description: Контакт создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
  /core/inventory-items:
    get:
      summary: Список складских позиций
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterInventoryProduct'
      responses:
        '200':
          description: Список складских позиций.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryCollection'
    post:
      summary: Создание складской позиции
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemInput'
      responses:
        '201':
          description: Позиция создана.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /core/inventory-items/{inventoryItemId}:
    parameters:
      - name: inventoryItemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Карточка складской позиции
      responses:
        '200':
          description: Детальная информация о складской позиции.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Обновление складской позиции
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemInput'
      responses:
        '200':
          description: Обновлённая позиция.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Удаление складской позиции
      responses:
        '204':
          description: Позиция удалена.
        '404':
          $ref: '#/components/responses/NotFound'
  /core/documents:
    get:
      summary: Список документов
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterDocumentType'
      responses:
        '200':
          description: Список документов.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCollection'
    post:
      summary: Создание документа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentInput'
      responses:
        '201':
          description: Документ создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /core/documents/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Карточка документа
      responses:
        '200':
          description: Детальная информация о документе.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Обновление документа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentInput'
      responses:
        '200':
          description: Обновлённый документ.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Удаление документа
      responses:
        '204':
          description: Документ удалён.
        '404':
          $ref: '#/components/responses/NotFound'
